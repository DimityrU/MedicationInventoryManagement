// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MedicationInventoryManagement.Entities;

public partial class MMContext : DbContext
{
    public MMContext()
    {
    }

    public MMContext(DbContextOptions<MMContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Medication> Medications { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        string path = Directory.GetCurrentDirectory();
        // Build configuration
        var config = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json")
            .Build();

        // Get connection string from appsettings.json
        string connectionString = config.GetConnectionString("data");

        // Configure SQL Server provider
        optionsBuilder.UseSqlServer(connectionString);
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Medication>(entity =>
        {
            entity.Property(e => e.MedicationId).HasDefaultValueSql("(newid())");

            entity.HasMany(d => d.Orders).WithMany(p => p.Medications)
                .UsingEntity<Dictionary<string, object>>(
                    "OrderMedication",
                    r => r.HasOne<Order>().WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_OrderMedication_Orders"),
                    l => l.HasOne<Medication>().WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_OrderMedication_Medications"),
                    j =>
                    {
                        j.HasKey("MedicationId", "OrderId").HasName("PK_OrderMedication_1");
                        j.ToTable("OrderMedication");
                    });
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.Property(e => e.NotificationId).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Medication).WithMany(p => p.Notifications)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Notifications_Medications");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.Property(e => e.OrderId).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.UserId).HasDefaultValueSql("(newid())");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}